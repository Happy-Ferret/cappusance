Cappusance is a powerful GUI builder for Cappuccino based on GNUstep Renaissance.
Cappusance i.e. features strong autolayout capabilities.
See <http://www.gnustep.it/Renaissance/> for the original GNUstep Renaissance documentation. Cappusance adds support for the more recent Cocoa controls and Cocoa bindings. However, Cappusance GUIs are fully backward-compatible to Renaissance.

As a big plus, Cappusance and has a RESTful Object/Relational Mapper (ORM) built in. This ORM allows you to express a rich CRUD-functional Cappuccino application in a single XML-file -- without writing Objective-J code at all! The Cappusance ORM conveys painless database-to-GUI mapping in the spirit of EOF/WebObjects: Database entities map to ArrayControllers, Database relations map to ArrayController master-detail bindings and all data manipulations at Objective-J level are transparently forwarded to the database.

Mojolicious is a perfect match for creating backends (http://mojolicio.us/).
Mojolicious comes with a powerful rest router and a builtin static server. This works well for serving the Cappuccino framework and the application.
The REST dialect of Cappusance can be easily adapted to any backend. You only need to subclass FSStore and overriding three simple methods.


Example usage with backend:
@import <Renaissance/Renaissance.j>
[...]
- (void) applicationDidFinishLaunching:(CPNotification)aNotification
{
// You can access this object in your markup file via '#CPOwner.store'.
	store=[[FSStore alloc] initWithBaseURL: "http://127.0.0.1:3000"]; 
// gui.gsmarkup is loaded from the Ressources folder
// we specify "self" (our AppController instance) as 'files owner'.
// this object is aliased as '#CPOwner' in the markup file.

	[CPBundle loadRessourceNamed: "gui.gsmarkup" owner:self];
// The gui markup will usually connect GUI objects to instance variables.
// From here on, manipulations at ArrayController and even at Objective-J level
// (e.g. insertion into Arrays) are magically mapped to the backend.
}


gui.gsmarkup and a mojolicous-based sample backend are here:
<https://github.com/daboe01/cappusance/wiki>

a comprehensive use case using all features is here:
<https://github.com/daboe01/Cellfinder>