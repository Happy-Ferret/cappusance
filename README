Cappusance is a powerful GUI builder for Cappuccino based on GNUstep Renaissance.
Cappusance i.e. features strong autolayout capabilities.
In addition to the original GNUstep Renaissance, Cappusance also supports Cocoa bindings and has a RESTful ORM built in for painless database-to-GUI mapping in the spirit of EOF/WebObjects.
Cappusance GUIs are written in plain XML.
See <http://www.gnustep.it/Renaissance/> for the original GNUstep Renaissance documentation.
See Slider<->TextField example on <http://aug-fancy.ukl.uni-freiburg.de/NewApplication/>

Example usage with backend:
@import <Renaissance/Renaissance.j>
[...]
- (void) applicationDidFinishLaunching:(CPNotification)aNotification
{
// I prefer the perl based mojolicious for creating backends (http://mojolicio.us/)
// Mojolicious is a perfect match because of the powerful rest router and the static server
// This can be easily be used to serve the frontend application.
	store=[[FSStore alloc] initWithBaseURL: "http://127.0.0.1:3000"]; 
// The store can be any RESTful backend, though.
// The REST dialect can be adapted to your backend by subclassing FSStore.

// gui.gsmarkup is loaded from the Ressources folder
// we specify "self" (our AppController instance) as 'files owner'.
// this object is aliased as '#CPOwner' in the markup file.
// You can access this object via '#CPOwner.store'.
// Any key value compliant reference is possible.
// Database entities map to ArrayControllers
// Relations are mapped by master detail bindings.

	[CPBundle loadRessourceNamed: "gui.gsmarkup" owner:self];
// The gui markup will usually connect GUI objects to instance variables.
// From here on, manipulations at ArrayController and even Objective-J level
// (e.g. insertion into Arrays) are magically mapped to the backend.
}


gui.gsmarkup and a sample backend are here:
<https://github.com/daboe01/cappusance/wiki>

