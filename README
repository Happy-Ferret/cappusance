Cappusance is a powerful GUI builder for Cappuccino. 
Cappusance i.e. features strong autolayout capabilities. Cappusance is actually a port of GNUstep Renaissance.
See <http://www.gnustep.it/Renaissance/> for the original GNUstep Renaissance documentation. Cappusance adds support for the more recent Cocoa controls and Cocoa bindings. Cappusance GUIs are fully backward-compatible to Renaissance.

As a big plus, Cappusance comes with a RESTful Object/Relational Mapper (ORM). This allows you to write a CRUD-functional application in a single XML-file -- without coding Javascript/Objective-J! The Cappusance ORM conveys automatic database-to-GUI mapping in the spirit of EOF/WebObjects: database entities map to ArrayControllers, relations can be expressed as master-detail bindings between ArrayControllers. Additionally, all data manipulations at the Objective-J level are transparently forwarded to the backend.

Example usage with backend:
@import <Renaissance/Renaissance.j>
[...]
- (void) applicationDidFinishLaunching:(CPNotification)aNotification
{
// You can access this object in your markup file via '#CPOwner.store'.
	store=[[FSStore alloc] initWithBaseURL: "http://127.0.0.1:3000"]; 
// gui.gsmarkup is loaded from the Ressources folder
// we specify "self" (our AppController instance) as 'files owner'.
// this object is aliased as '#CPOwner' in the markup file.

	[CPBundle loadRessourceNamed: "gui.gsmarkup" owner:self];
// The gui markup will usually connect GUI objects to instance variables.
// From here on, manipulations at ArrayController and even at Objective-J level
// (e.g. insertion into Arrays) are magically mapped to the backend.
}

Mojolicious is a perfect match for creating backends (http://mojolicio.us/).
This modern perl framework comes with a powerful rest router and a builtin static server for serving the Cappuccino framework.
The REST dialect of Cappusance can be easily adapted to any backend. You only need to subclass FSStore and overriding three simple methods.

Unfortunately, i did not yet have the time to write documentation for the ORM-part. However, a comprehensive use case with all features turned on is here:
<https://github.com/daboe01/Cellfinder>